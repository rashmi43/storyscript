#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
from collections import namedtuple
from glob import glob
import io
import json
import multiprocessing as mp
from os import path
import sys

from click import unstyle

from storyscript.Api import Api
from storyscript.App import _clean_dict

from utils import parse_features

test_dir = path.dirname(path.realpath(__file__))
Result = namedtuple('Result', ['status', 'updated'])

features = {'globals': True}


def parse_args():
    parser = argparse.ArgumentParser(description='E2E update tool')
    parser.add_argument('stories', metavar='story', type=str, nargs='*',
                        help='stories to updates')
    parser.add_argument('-a', '--all', dest='all', action='store_true',
                        help='Update all tests')
    return parser.parse_args()


class StoryRunner():

    def __init__(self, story_path):
        self.story_path = story_path
        self.story_path_raw = path.splitext(story_path)[0]
        self.updated = False

    def run(self):
        with io.open(self.story_path, 'r') as f:
            source = f.read()
        s = Api.loads(source, features=parse_features(features, source))
        if s.success():
            result = _clean_dict(s.result())
            del result['version']
            self.update_success(result)
            return Result(status=True, updated=self.updated)
        else:
            e = s.errors()[0]
            self.update_error(unstyle(e.message()))

        return Result(status=False, updated=self.updated)

    def update_success(self, result):
        json_file = self.story_path_raw + '.json'
        text = json.dumps(result, indent=2)
        self.check_update(json_file, text)

    def update_error(self, error):
        error_file = self.story_path_raw + '.error'
        self.check_update(error_file, text=error)

    def check_update(self, update_path, text):
        source = ''
        if path.isfile(update_path):
            with io.open(update_path, 'r') as f:
                source = f.read()

        if source.strip() != text.strip():
            self.updated = True
            with open(update_path, 'w') as w:
                w.write(text)
                w.write('\n')


def run(story_path):
    result = StoryRunner(story_path).run()
    return story_path, result


def find_all_stories():
    return glob(path.join(test_dir, '**', '*.story'), recursive=True)


def main():
    args = parse_args()
    if args.all:
        stories = find_all_stories()
    else:
        if len(args.stories) == 0:
            print('A story argument is required')
            sys.exit(1)
        stories = args.stories
    plural = 'ies' if len(stories) != 1 else 'y'
    print(f'Updating {len(stories)} stor{plural}')
    with mp.Pool() as pool:
        results = pool.map(run, stories, 1)

    for story, result in results:
        if result.updated:
            status = 'OK' if result.status else 'ERR'
            print(f'{path.relpath(story)}: {status}')


if __name__ == '__main__':
    main()
